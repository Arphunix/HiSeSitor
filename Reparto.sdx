Simulacion:

	+Luis:
		-loadMap()
		-escribeResultados()
	+Guille:
		-correSimulacion() //DONE
		-addAleatOponents() //DONE
	+Victor:
		-createGrafo()

Estado:
	+L:	
		-initGraph()
		-estima()
		-calcula()
		-guardaValoresEstado();
	+G:
		-addAleatOponents(); //DONE
		-busca() : Nodo nodo //DONE
		-isCalcula(); //DONE
		-isEstima(); //DONE
		-updateEstado(Nodo nodo); //DONE
		
	+Victor
		-getAdyacentes();
		-decide();
		-updateSensor();
		-evaluaVictoria();
	+Unknown
		
Grafo: 
		-Clase Grafo
			public Grafo ()
			public void addNode (Nodo n) //  Probablemente esta función carezca de sentido
			public boolean addNode (List<Integer> aristas, Nodo n)
			public List<Nodo> getShortestPath (Nodo n1, Nodo n2)
			//FALTA public Nodo getShortestPathNode (Nodo n1, Nodo n2) //de el nodo al que ir
			public int getNodesCount ()
		-Unknown
			//FALTA -> setCazador(nodo);
			//FALTA -> getPresas();
			//Falta -> getDistancia(nodo, nodo;
			//FALTA -> creaPresa(Nodo) & borraPresa(Nodo)

//futuro aka ETA
Sensor
	+Unknown
		-isVisto(Nodo) : boolean
Estrategia
	+Unknown
		-evaluaNodo(Nodo)
		-getSensores()
		-update()//recalcular subestructuras
		-getObjetivo() : nodo//coger el nodo con mayor puntuación
		
		